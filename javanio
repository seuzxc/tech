
背景
===
```
大家都知道，与CPU的计算速度相比，内存，磁盘的读写数据都是有量级的速度差距的。而网络的传输处理速度
比磁盘还要慢很多。要使慢速的网络适应于快速运作的CPU，传统的服务器解决方案是：使用缓存和多线程，通过
多线程服务于不同的网络连接。不过线程也是需要消耗内存的，而且线程上线文切换也有一定的消耗。如果线程
太多这个开销也是不小的（比如一个线程需要1M内存的，话处理1000个连接就差不多需要1G的内存了）。
那么有没有什么方式可以让一个线程去处理所有的连接，在连接准备好了之后，这个线程才去处理连接的数据读取发送？
当然有，这就非阻塞IO。非阻塞IO不会在处理一个连接的时候一直等待处理完再去处理其他的，一般都是连接准备好了
之后，它才会去处理。当然这些是需要底层的操作系统支持的。
```

操作系统支持
===
```
如前面所描述的，非阻塞IO需要操作系统的支持，那么在理解操作系统支持之前，先了解下IO操作在计算机中一般
是怎么运行的
```


java NIO使用
===

Stream和Channel的区别
==
- 从编程的角度来说，stream是基于字节的，而channel是基于快的。流的设计是一个字节一个字节的处理数据
  ，处于性能考虑也可以传送字节数组，不过基本的概念都是一次传送一个字节。与之不同的是channel会传送
  缓冲区中的数据块。
- stream 和channel的另一个区别是：channel支持对童一个对象进行读写，而stream不行
- strean中的byte不可以重复的读取，但是channel对应buffer是可以重复读取的

Buffer中基础属性方法
==
- position： 表示buffer中下一个操作的位置
- capacity： 表示buffer的容量
- limit： buffer中最后一个可访问的数据
- mark：buffer中客户端指定的索引，可以通过mark()指定mark为当前的position，也可以通过reset()方法
将当前的position设置为mark表示的位置
- clear(): clear 通过设置position 为0 limit 为capacity来清空buffer(但是实际的数据不会被清理)，
这样就可以完全重新填充buffer
- rewind(): rewind 会将position设置为0，其他的不变，这样其实就可以重新读取buffer了
- flip(): flip将limit设置为当前的position 并且设置position为0. 如果你想排空刚刚填充的缓冲区可以用
该方法(方便读buffer的所有数据或者执行write)
- remaining(): 该方法返回buffer的position和limit之间的元素数量
- hasRemaining(): 如果remaing() 方法返回的值大于0 ，则hasRemaing返回true
